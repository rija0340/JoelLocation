{% extends 'baseClient2.html.twig' %}

{% block title %}Réservation
{% endblock %}

{% block stylesheets %}
	{# plus de fichiers CSS Bootstrap ou custom #}
{% endblock %}


{% block body %}

	<div class="flex flex-col md:flex-row md:items-center md:justify-between space-y-4 md:space-y-0 py-6">
		<header class="flex flex-col md:flex-row md:items-center md:justify-between space-y-4 md:space-y-0">
			<div>
				<h1 class="text-3xl title-red">Nouvelle réservation</h1>
				<p class="text-gray-500">Suivez les étapes pour créer une nouvelle réservation</p>
			</div>

		</header>

		{% include 'client2/reservation/nouvelle_resa/parts/_step_navigation.html.twig' with { currentStep: 1 } %}

	</div>

	{{ form_start(form) }}

	<div class="bg-base-100 p-6 rounded-xl shadow mb-6">
		<h2 class="text-error font-bold text-lg mb-4">Départ :</h2>
		<div class="grid grid-cols-1 md:grid-cols-3 gap-4">
			<div>
				<label class="label">Agence de départ :</label>
				{{ form_widget(form.agenceDepart, {'attr': {'class': 'input input-bordered w-full'}}) }}
			</div>
			<div>
				<label class="label">Date de départ :</label>
				{{ form_widget(form.dateDepart, {'attr': {'class': 'input input-bordered w-full'}}) }}
			</div>
			<div>
				<label class="label">Type de véhicule :</label>
				{{ form_widget(form.typeVehicule, {'attr': {'class': 'input input-bordered w-full'}}) }}
			</div>
		</div>
	</div>

	<div class="bg-base-100 p-6 rounded-xl shadow mb-6">
		<h2 class="text-error font-bold text-lg mb-4">Retour :</h2>
		<div class="grid grid-cols-1 md:grid-cols-3 gap-4">
			<div>
				<label class="label">Agence de retour :</label>
				{{ form_widget(form.agenceRetour, {'attr': {'class': 'input input-bordered w-full'}}) }}
			</div>
			<div>
				<label class="label">Date de retour :</label>
				{{ form_widget(form.dateRetour, {'attr': {'class': 'input input-bordered w-full'}}) }}
			</div>
			<div>
				<label class="label">Lieu de séjour :</label>
				{{ form_widget(form.lieuSejour, {'attr': {'class': 'input input-bordered w-full'}}) }}
			</div>
		</div>
	</div>

	<div class="text-center mt-6">
		<button class="btn btn-error" id="enregistrer">
			<i class="fa fa-book mr-2"></i>
			Enregistrer
		</button>
	</div>

	{{ form_end(form) }}
{% endblock %}

{% block javascripts %}
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
	<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
	<script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/fr.js"></script>
	<script type="text/javascript">
		document.addEventListener('DOMContentLoaded', function () {
const now = new Date();
const dateDepartInput = document.getElementById("reservation_step1_dateDepart");
const dateRetourInput = document.getElementById("reservation_step1_dateRetour");

// Also support class selector for more flexible targeting
if (! dateDepartInput && ! dateRetourInput) {
const smartInputs = document.querySelectorAll('.smart-datetime-input');
if (smartInputs.length >= 2) {
dateDepartInput = smartInputs[0];
dateRetourInput = smartInputs[1];
}
}

// Mobile detection
function isMobileDevice() {
return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || (window.innerWidth <= 768);
}

// Check if browser supports datetime-local input properly
function supportsDateTimeLocal() {
const input = document.createElement('input');
input.type = 'datetime-local';
return input.type === 'datetime-local';
}

// Convert date to datetime-local format (YYYY-MM-DDTHH:MM)
function toDateTimeLocalString(date) {
if (! date) 
return '';

const year = date.getFullYear();
const month = String(date.getMonth() + 1).padStart(2, '0');
const day = String(date.getDate()).padStart(2, '0');
const hours = String(date.getHours()).padStart(2, '0');
const minutes = String(date.getMinutes()).padStart(2, '0');
return `${year}-${month}-${day}T${hours}:${minutes}`;
}

// Convert datetime-local string to Date object
function fromDateTimeLocalString(dateString) {
if (! dateString) 
return null;

return new Date(dateString);
}

// Parse French format date (d/m/Y H:i) to Date object
function parseFrenchDateTime(dateString) {
if (! dateString) 
return null;

const parts = dateString.match(/(\d{1,2})\/(\d{1,2})\/(\d{4})\s+(\d{1,2}):(\d{2})/);
if (parts) {
return new Date(parseInt(parts[3]), // year
parseInt(parts[2]) - 1, // month (0-indexed)
parseInt(parts[1]), // day
parseInt(parts[4]), // hours
parseInt(parts[5]) // minutes
);
}
return null;
}

function addOneDay(date) {
const result = new Date(date.getTime());
result.setDate(result.getDate() + 1);
return result;
}

const isMobile = isMobileDevice();
const supportsNativeDatetime = supportsDateTimeLocal();

let startPicker,
endPicker;

if (isMobile && supportsNativeDatetime) { // Use native datetime-local inputs for mobile
console.log('Using native datetime inputs for mobile');

// Convert inputs to datetime-local type
dateDepartInput.type = 'datetime-local';
dateRetourInput.type = 'datetime-local';

// Add mobile-friendly styling
dateDepartInput.classList.add('native-datetime');
dateRetourInput.classList.add('native-datetime');

// Set initial values
const initialStartDate = dateDepartInput.value ? parseFrenchDateTime(dateDepartInput.value) || now : now;
const initialEndDate = dateRetourInput.value ? parseFrenchDateTime(dateRetourInput.value) || addOneDay(initialStartDate) : addOneDay(initialStartDate);

dateDepartInput.value = toDateTimeLocalString(initialStartDate);
dateRetourInput.value = toDateTimeLocalString(initialEndDate);

// Set minimum date to now
dateDepartInput.min = toDateTimeLocalString(now);
dateRetourInput.min = toDateTimeLocalString(initialStartDate);

// Handle date changes
dateDepartInput.addEventListener('change', function () {
const startDate = fromDateTimeLocalString(this.value);
if (startDate) {
const endDate = addOneDay(startDate);
dateRetourInput.min = toDateTimeLocalString(startDate);

// Update end date if it's before start date
const currentEndDate = fromDateTimeLocalString(dateRetourInput.value);
if (! currentEndDate || currentEndDate <= startDate) {
dateRetourInput.value = toDateTimeLocalString(endDate);
}
}
});

} else { // Use Flatpickr for desktop or unsupported mobile browsers
console.log('Using Flatpickr for datetime inputs');

const flatpickrConfig = {
locale: 'fr',
enableTime: true,
time_24hr: true,
dateFormat: "d/m/Y H:i",
allowInput: true,
clickOpens: true,

// Mobile optimizations for Flatpickr
...(isMobile && {
static: true, // Prevents positioning issues on mobile
disableMobile: false, // Allow Flatpickr on mobile
monthSelectorType: 'dropdown',
yearSelectorType: 'dropdown',
// Larger touch targets
onReady: function (selectedDates, dateStr, instance) {
if (instance.calendarContainer) {
instance.calendarContainer.classList.add('mobile-optimized');
}
}
})
};

startPicker = flatpickr(dateDepartInput, {
... flatpickrConfig,
minDate: now,
defaultDate: dateDepartInput.value ? parseFrenchDateTime(dateDepartInput.value) || now : now,
onChange: function (selectedDates) {
const startDate = selectedDates[0];
if (startDate) {
const endDate = addOneDay(startDate);
endPicker.set('minDate', startDate);

// Update end date if it's not set or is before start date
const currentEndDates = endPicker.selectedDates;
if (currentEndDates.length === 0 || currentEndDates[0] <= startDate) {
endPicker.setDate(endDate);
}
}
}
});

const initialStartDate = startPicker.selectedDates[0] || now;
const initialEndDate = addOneDay(initialStartDate);

endPicker = flatpickr(dateRetourInput, {
... flatpickrConfig,
minDate: initialStartDate,
defaultDate: dateRetourInput.value ? parseFrenchDateTime(dateRetourInput.value) || initialEndDate : initialEndDate
});
}

// Add CSS for mobile optimization
if (isMobile) {
const style = document.createElement('style');
style.textContent = `
            .native-datetime {
                width: 100%;
                padding: 12px;
                font-size: 16px !important; /* Prevents zoom on iOS */
                border: 1px solid #ddd;
                border-radius: 4px;
                -webkit-appearance: none;
                appearance: none;
                background-color: white;
            }
            
            .mobile-optimized {
                font-size: 14px;
                touch-action: manipulation;
            }
            
            .mobile-optimized .flatpickr-day {
                height: 35px;
                line-height: 35px;
                width: 35px;
            }
            
            .mobile-optimized .flatpickr-time input {
                font-size: 16px;
                padding: 8px;
            }
            
            .mobile-optimized .flatpickr-calendar {
                width: 280px;
            }
            
            @media (max-width: 480px) {
                .mobile-optimized .flatpickr-calendar {
                    width: 95vw;
                    left: 2.5vw !important;
                }
            }
        `;
document.head.appendChild(style);
}
});
	</script>
{% endblock %}
